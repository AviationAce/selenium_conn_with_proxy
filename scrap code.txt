        # my_proxy_addr = '127.0.0.1:1080'
        # ff_proxy = Proxy()
        # ff_proxy.proxyType = ProxyType.MANUAL
        # ff_proxy.socks_proxy = my_proxy_addr
        
        # capabilities = webdriver.DesiredCapabilities.FIREFOX
        # ff_proxy.add_to_capabilities(capabilities)
        
"C:\Users\ChopperDave64\Downloads\chrome-win\chrome-win\chrome.exe"
"C:\Windows\System32\chromedriver.exe"

chromedriver.exe renamed to chromedriver.exe_ at these locations
C:\Users\ChopperDave64\AppData\Roaming\Python\Python37\site-packages\chromedriver_binary
C:\Users\ChopperDave64\AppData\Roaming\undetected_chromedriver



class ff_Profile:
    def __init__(self):
        print('  ff_Profile init')
        my_proxy_addr = '127.0.0.1:1080'
        ip, port = my_proxy_addr.split(':')
        self.ff_profile = webdriver.FirefoxProfile()
        self.ff_profile.set_preference('network.proxy.type', 1)
        self.ff_profile.set_preference('network.proxy.socks', ip)
        self.ff_profile.set_preference('network.proxy.socks_port', int(port))
        print('  ff_Profile init... done')

    def get(self):
        return self.ff_profile

        # ff_profile = ff_Profile()
        # ff_profile = ff_profile.get()

        # self.driver = webdriver.Firefox(executable_path=gd_path, options=ff_options, firefox_profile=ff_profile, service = ff_service)
        # self.driver = webdriver.Firefox(options=ff_options, firefox_profile=ff_profile, service=ff_service)




NOTE: These would have been nice but they use a differnt connection and thus not behing the proxy.  Will rewrite to read for the driver object.
import urllib.request
from json import loads

    def MyPublidIP(TermPrint=False):
        # This line will connect to the website, read its contents
        # and parse the JSON output
        # data = loads(urllib3.open("http://httpbin.org/ip").read())
        wp = urllib.request.urlopen("http://httpbin.org/ip")
        data = loads(wp.read())
        if TermPrint:
            print("The public IP is : %s" % data["origin"])
        return data["origin"]

    def CheckPubIP(self, ip_to_check):
        ret = False
        detected_IP = self.MyPublidIP()
        if detected_IP == ip_to_check:
            ret = True
        else:
            print('detected IP: ' + detected_IP +
                  '  |  Proxy IP should be: ' + ip_to_check)
        return ret
